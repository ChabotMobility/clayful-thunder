(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

/**
 * Based on Iamport's JavaScript SDK.
 * - Iamport's JavaScript SDK should be imported before this plugin.
 * - `IMP.init('id');` should be called before `makePayment` gets called.
 * - Website: http://iamport.kr/
 * - Guide: https://docs.iamport.kr/
 */

var RedirectionError = function RedirectionError(options) {
	var code = options.code,
	    type = options.type,
	    subject = options.subject,
	    message = options.message;


	var err = new Error(message);

	err.code = code;
	err.type = type;
	err.subject = subject;

	return err;
};

var implementation = function implementation() {
	var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var _options$redirectURL = options.redirectURL,
	    redirectURL = _options$redirectURL === undefined ? function (data) {

		var location = window.location;
		var type = data.subscription ? 'subscription' : 'order';

		// `?type` query is required.
		return location.protocol + '//' + location.host + '?type=' + type;
	} : _options$redirectURL,
	    _options$billingKeyNa = options.billingKeyName,
	    billingKeyName = _options$billingKeyNa === undefined ? 'Billing Key' : _options$billingKeyNa,
	    _options$orderName = options.orderName,
	    orderName = _options$orderName === undefined ? function (cart) {
		return (cart.items[0].product.name || '').slice(0, 16);
	} : _options$orderName,
	    _options$buyerName = options.buyerName,
	    buyerName = _options$buyerName === undefined ? function (customer) {
		return customer.name.full;
	} : _options$buyerName,
	    _options$buyerAddress = options.buyerAddress,
	    buyerAddress = _options$buyerAddress === undefined ? function (address) {
		return [address.address1, address.address2].filter(function (v) {
			return v;
		}).join(' ').trim();
	} : _options$buyerAddress,
	    _options$redirectionC = options.redirectionCallback,
	    redirectionCallback = _options$redirectionC === undefined ? function () {} : _options$redirectionC;

	// Handle mobile redirections automatically

	implementation.handleRedirect(redirectionCallback);

	return function () {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		var callback = arguments[1];
		var paymentMethod = data.paymentMethod,
		    cart = data.cart,
		    order = data.order,
		    subscription = data.subscription,
		    customer = data.customer;


		if (paymentMethod.cardFields) {
			// Since Iamport doesn't support manual payment with card information,
			// do not call `IMP.request_pay` method.
			return callback(null, {});
		}

		var subject = subscription || order;
		var address = subject.address.shipping;
		var currency = subject.currency.payment.code;

		var taxFree = cart ? implementation.calculateTaxFree(cart) : null;

		// Default request options for orders and subscriptions
		var params = $.extend({
			pg: paymentMethod.meta.pg,
			pay_method: paymentMethod.meta.payMethod,
			currency: currency,
			buyer_email: customer.email || null,
			buyer_name: buyerName(customer),
			buyer_tel: customer.mobile || customer.phone, // Required by Iamport
			buyer_addr: buyerAddress(address),
			buyer_postcode: address.postcode,
			m_redirect_url: redirectURL(data) // Set redirect URL if is needed...
		}, subscription ? {
			// Subscription case, Issue a billing key for subscriptions.
			// Reference: https://github.com/iamport/iamport-manual/tree/master/%EB%B9%84%EC%9D%B8%EC%A6%9D%EA%B2%B0%EC%A0%9C/example
			merchant_uid: subscription._id, // Set `merchant_uid` as a subscription's id
			// Billing key will be issued..
			// For a registered customer: customer._id
			// For a non-registered customer: subscription._id
			customer_uid: subscription.customer._id || subscription._id,
			name: billingKeyName, // Placeholder name
			amount: 0
		} : $.extend({
			// Regular order case.
			merchant_uid: order._id,
			name: orderName(cart),
			// Handle rich data cases.
			amount: typeof order.total.amount.raw === 'number' ? order.total.amount.raw : order.total.amount
		}, taxFree ? {
			// `tax_free` param is only supported for regular orders for now.
			tax_free: taxFree
		} : {}));

		return IMP.request_pay(params, function (res) {
			return callback(res.success ? null : res, res);
		});
	};
};

implementation.calculateTaxFree = function (cart) {

	var isZeroTaxed = function isZeroTaxed(item) {
		return item.taxed.convertedRaw === 0;
	};

	// Handle `tax_free` parameter of Iamport for tax exempted & zero-rated products.
	// Reference: https://docs.iamport.kr/tech/vat
	var itemsWithZeroTax = [].concat(
	// Zero taxed items
	cart.items.reduce(function (items, item) {
		return items.concat(item, item.bundleItems || []);
	}, []).filter(isZeroTaxed).map(function (item) {
		return item.price.withTax.convertedRaw;
	}),
	// Zero taxed shipment
	(cart.shipments || []).filter(isZeroTaxed).map(function (shipment) {
		return shipment.fee.withTax.convertedRaw;
	})).filter(function (v) {
		return v !== 0;
	}); // Just in case where an actual item/shipment's price is 0

	if (itemsWithZeroTax.length === 0) {
		// There are no zero taxed items and shipments
		return null;
	}

	// Build a sum price of tax free items and shipments.
	// It is important that we use the payment currency's precision to calculate sum.
	// Reference: https://stackoverflow.com/questions/1458633/how-to-deal-with-floating-point-number-precision-in-javascript
	var precision = cart.currency.payment.precision;

	var sum = itemsWithZeroTax.reduce(function (sum, v) {
		return sum + v;
	}, 0);

	if (precision > 0) {
		sum = parseFloat(parseFloat(sum).toPrecision(precision));
	}

	return sum;
};

implementation.handleRedirect = function (callback) {

	var Thunder = window.Thunder;
	var query = Thunder.util.urlQuery();

	var types = {
		order: true,
		subscription: true
	};

	if (types[query.type] && query.merchant_uid) {
		var success = query.imp_success,
		    type = query.type,
		    subject = query.merchant_uid;

		// Payment failure case...

		if (success !== 'true') {

			return callback(RedirectionError({
				code: 'iamport-payment',
				message: 'Failed to make a payment.',
				type: type,
				subject: subject
			}));
		}

		// Payment success case...
		if (type === 'order') {
			// Regular order case
			return callback(null, { type: type, subject: subject });
		}

		// Subscription case, we should post schedules to Iamport via Clayful's API
		return Thunder.request({
			method: 'POST',
			url: '/v1/me/subscriptions/' + subject + '/scheduled',
			data: {}
		}).then(function () {
			// Scheduling succeeded...
			return callback(null, { type: type, subject: subject });
		}, function (err) {
			// Scheduling failed...
			return callback(RedirectionError({
				code: 'clayful-schedule',
				message: 'Failed to post schedules.',
				type: type,
				subject: subject
			}));
		});
	}
};

window.ThunderMakePaymentIamport = implementation;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
